[tox]
envlist = py38
skipsdist = True
marqo_from_version = {env:MARQO_FROM_VERSION:}
marqo_to_version = {env:MARQO_TO_VERSION:}
marqo_to_version_image_tag = {env:MARQO_TO_VERSION_IMAGE_TAG:}

[coverage:html]
show_contexts = true

[coverage:run]
branch = true
source = src

[testenv]
install_command = pip install {opts} {packages}
whitelist_externals =
  python
deps =
  pytest
  -rrequirements.txt
  -rrequirements.dev.txt
setenv =
  PYTHONPATH = {toxinidir}{/}src:{toxinidir}
commands =
  pytest --durations=100 --cov --cov-append --cov-context=test --cov-report=html {posargs}

[testenv:clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv2] #basically copy of testenv but in a different repo
whitelist_externals =
  python
  bash
  docker
deps =
  pytest
  pillow
  numpy
  {[tox]py_marqo_package} #how do I get this and what should be the value?

commands_pre =
;  bash {toxinidir}{/}scripts{/}clone_marqo_repo.sh {toxinidir} {[tox]marqo_branch} #this shouldn't be
;  #required as all it does is create a temp directory, then cd into the temp dir, clone marqo from the repo, then pull marqo from a branch (if specified in the arguments). Then build that version of marqo

  ;pulling marqo_from_version from the dockerHub. Assumes that the proper marqoai/marqo:2.12.2 is passed to it as argument.
  bash echo "aditya Printing marqo_from_version" {[tox]marqo_from_version}
  bash {toxinidir}{/}scripts{/}docker_pull_remote_image.sh {[tox]marqo_from_version}
  ;Can't pull marqo_to_version from the dockerHub as it doesn't exist yet. Need to pull it from ECR.
  bash echo "aditya Printing marqo_to_version_image_tag" {[tox]marqo_to_version_image_tag}
  bash {toxinidir}{/}scripts{/}ecr_pull_remote_image.sh {[tox]marqo_to_version_image_tag}
commands_post =
  - docker rm -f marqo
  - docker rm -f vespa #shouldn't be required as no external vespa docker should be created.


[testenv2:py3-docker_backwards_compatibility_tests]
# This test environment assumes that Vespa is running outside of marqo on a cpu-only instance
setenv =
  TESTING_CONFIGURATION = CPU_LOCAL_MARQO
  PYTHONPATH = {toxinidir}{/}tests{:}{toxinidir}
  PATH = {env:PATH}{:}{toxinidir}{/}scripts
  ; this is set in case test needs to stop & rerun marqo.
  MARQO_IMAGE_NAME = {[tox]marqo_image_name}
  ; Note: instead of setting this here, we could run . conf in t;  he startup script itself
  MARQO_API_TESTS_ROOT = {toxinidir}
  MARQO_FROM_VERSION = {env:MARQO_FROM_VERSION:}

  MARQO_TO_VERSION = {env:MARQO_TO_VERSION:}
commands =
  bash {toxinidir}{/}scripts{/}start_local_marqo.sh {[tox]marqo_image_name}
  pytest {posargs} --ignore={toxinidir}{/}temp --ignore={toxinidir}{/}manual_tests #WILL run pytest but ignore the /temp direcotry and /manual_tests directory which is currently present in marqo-api-tests (only manual_tests is present)

